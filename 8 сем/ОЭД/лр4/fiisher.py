import numpy as np
from scipy.stats import f

# Данные
x = np.array([-3, -2, -1, 0, 3])
y = np.array([-5, -7, -5, -2, 20])

# Предсказанные значения y по уравнению регрессии
b = np.array([-2.11250654, 4.22370487, 1.05363684])
y_pred = b[0] + b[1] * x + b[2] * x**2

# Сумма квадратов отклонений от регрессии (SQR_res)
SQR_res = np.sum((y - y_pred)**2)

# Сумма квадратов регрессии (SQR_reg)
SQR_reg = np.sum((y_pred - np.mean(y))**2)

# Степени свободы
k = 3  # количество коэффициентов (a0, a1, a2)
n = len(x)  # количество наблюдений

# Средняя квадратичная ошибка для регрессии и для ошибок
MSE_reg = SQR_reg / (k - 1)
MSE_res = SQR_res / (n - k)

# Расчет F-статистики
F_stat = MSE_reg / MSE_res

# Критическое значение F для заданных степеней свободы
F_critical = f.ppf(1 - 0.01, k - 1, n - k)

# Сравнение с критическим значением
if F_stat > F_critical:
    print("Модель адекватна (отклоняем гипотезу о неадекватности).")
else:
    print("Модель неадекватна (не отклоняем гипотезу о неадекватности).")

# Вывод результатов
print(f"F-статистика: {F_stat}")
print(f"Критическое значение F: {F_critical}")
