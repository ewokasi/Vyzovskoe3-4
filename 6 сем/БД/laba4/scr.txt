CREATE TABLE PARK (
    ID_PARK SERIAL PRIMARY KEY,
    NAME VARCHAR(30) NOT NULL
);


CREATE TABLE ALLEYA (
    ID_ALLEYA SERIAL PRIMARY KEY,
    NAME VARCHAR(30) NOT NULL,
    ID_PARK INTEGER,
    FOREIGN KEY (ID_PARK) REFERENCES PARK(ID_PARK) ON UPDATE CASCADE ON DELETE RESTRICT
);

CREATE TABLE KIND (
    ID_KIND SERIAL PRIMARY KEY,
    NAME VARCHAR(30) NOT NULL
);

CREATE TABLE ITEM (
    ID_ITEM SERIAL NOT NULL PRIMARY KEY,
    COMMENTARY varchar(255) default null
);

CREATE TYPE TREE_STATUS AS ENUM ('GOOD', 'BAD', 'DEAD');
CREATE TYPE TREE_INFO AS (
    WEALTH TREE_STATUS,
    LAST_CHECK DATE
);
CREATE TABLE TREE (
    PRIMARY KEY (ID_ITEM),
    INFO TREE_INFO,
    DATE_OF_PLANT DATE,
    ID_KIND INTEGER NOT NULL,
    FOREIGN  KEY (ID_KIND) REFERENCES KIND(ID_KIND) ON DELETE CASCADE ON UPDATE CASCADE
    ) INHERITS (ITEM);

CREATE TABLE FOUNTAIN (
    PRIMARY KEY (ID_ITEM),
    DATE_OF_PLACE DATE
) INHERITS (ITEM);

CREATE TABLE STATUE (
    PRIMARY KEY (ID_ITEM),
    DATE_OF_PLACE DATE
) INHERITS (ITEM);

CREATE TABLE CUT (
    ID_CUT SERIAL PRIMARY KEY,
    ID INTEGER NOT NULL,
    CUT DATE NOT NULL,
    CONSTRAINT FK_CUT_TREE FOREIGN KEY (ID) REFERENCES TREE(ID_ITEM) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE ITEM_ALLEYA (
    ID_ITEM_ALLEYA SERIAL PRIMARY KEY,
    ID INTEGER NOT NULL,
    ID_ALLEYA INTEGER NOT NULL
);

-- Проверка на существование
CREATE OR REPLACE FUNCTION update_item_id_on_item_alleya_update() RETURNS TRIGGER AS $$
BEGIN
   
    IF NOT EXISTS (
        SELECT 1 FROM ITEM WHERE ID_ITEM = NEW.ID
    ) THEN
        RAISE EXCEPTION 'Item with ID % does not exist', NEW.ID;
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_item_id_on_item_alleya_update
BEFORE UPDATE ON ITEM_ALLEYA
FOR EACH ROW
EXECUTE FUNCTION update_item_id_on_item_alleya_update();

CREATE TRIGGER update_item_id_on_item_alleya_in
BEFORE INSERT ON ITEM_ALLEYA
FOR EACH ROW
EXECUTE FUNCTION update_item_id_on_item_alleya_update();


-- Триггеры для обновления в таблице 

CREATE OR REPLACE FUNCTION update_item_alleya_on_update() RETURNS TRIGGER AS $$
BEGIN
    UPDATE ITEM_ALLEYA
    SET ID = NEW.ID_ITEM
    WHERE ID = OLD.ID_ITEM;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_item_alleya_on_update_fountain
AFTER UPDATE ON FOUNTAIN
FOR EACH ROW
EXECUTE FUNCTION update_item_alleya_on_update();


CREATE TRIGGER update_item_alleya_on_update_tree
AFTER UPDATE ON TREE
FOR EACH ROW
EXECUTE FUNCTION update_item_alleya_on_update();


CREATE TRIGGER update_item_alleya_on_update_statue
AFTER UPDATE ON STATUE
FOR EACH ROW
EXECUTE FUNCTION update_item_alleya_on_update();




-- Триггеры для удаления из таблицы 

CREATE OR REPLACE FUNCTION delete_item_alleya_on_delete() RETURNS TRIGGER AS $$
BEGIN
    DELETE FROM ITEM_ALLEYA
    WHERE ID = OLD.ID_ITEM;

    RETURN OLD;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER delete_item_alleya_on_fountain_delete
BEFORE DELETE ON FOUNTAIN
FOR EACH ROW
EXECUTE FUNCTION delete_item_alleya_on_delete();


CREATE TRIGGER delete_item_alleya_on_tree_delete
BEFORE DELETE ON TREE
FOR EACH ROW
EXECUTE FUNCTION delete_item_alleya_on_delete();


CREATE TRIGGER delete_item_statue_on_statue_delete
BEFORE DELETE ON STATUE
FOR EACH ROW
EXECUTE FUNCTION delete_item_alleya_on_delete();


-------------------------------------------------------------------------
INSERT INTO PARK (ID_PARK, NAME) VALUES (1, 'Космический');
INSERT INTO PARK (ID_PARK, NAME) VALUES (2, 'Спортивный');

INSERT INTO ALLEYA (ID_ALLEYA, NAME, ID_PARK) VALUES (1, 'Скоростная', 1);
INSERT INTO ALLEYA (ID_ALLEYA, NAME, ID_PARK) VALUES (2, 'Ракетная', 1);
INSERT INTO ALLEYA (ID_ALLEYA, NAME, ID_PARK) VALUES (3, 'Беговая', 2);
INSERT INTO ALLEYA (ID_ALLEYA, NAME, ID_PARK) VALUES (4, 'Быстрая', 2);
INSERT INTO ALLEYA (ID_ALLEYA, NAME, ID_PARK) VALUES (5, 'Тройная липовая', 1);
INSERT INTO ALLEYA (ID_ALLEYA, NAME, ID_PARK) VALUES (6, 'Театральная', 2);

INSERT INTO KIND (ID_KIND, NAME) VALUES (1, 'Клен');
INSERT INTO KIND (ID_KIND, NAME) VALUES (2, 'Ясень');
INSERT INTO KIND (ID_KIND, NAME) VALUES (3, 'Береза');
INSERT INTO KIND (ID_KIND, NAME) VALUES (4, 'Дуб');
INSERT INTO KIND (ID_KIND, NAME) VALUES (5, 'Липа');
INSERT INTO KIND (ID_KIND, NAME) VALUES (6, 'Ель');
INSERT INTO KIND (ID_KIND, NAME) VALUES (7, 'Яблоня');
INSERT INTO KIND (ID_KIND, NAME) VALUES (8, 'Ива');
INSERT INTO KIND (ID_KIND, NAME) VALUES (9, 'Тополь');
INSERT INTO KIND (ID_KIND, NAME) VALUES (10, 'Пихта');

INSERT INTO TREE (DATE_OF_PLANT, ID_KIND, INFO) VALUES ('16-04-2021', 1, ROW('GOOD', '02-05-2024'));
INSERT INTO TREE (DATE_OF_PLANT, ID_KIND, INFO) VALUES ('16-04-2021', 3, ROW('GOOD', '02-05-2024'));


INSERT INTO FOUNTAIN (DATE_OF_PLACE) VALUES ('16-04-2024');
INSERT INTO STATUE (DATE_OF_PLACE) VALUES ('16-04-2024');

-- Inserting into ITEM_ALLEYA
INSERT INTO ITEM_ALLEYA (ID, ID_ALLEYA) VALUES (1, 1);
INSERT INTO ITEM_ALLEYA (ID, ID_ALLEYA) VALUES (2, 2);
INSERT INTO ITEM_ALLEYA (ID, ID_ALLEYA) VALUES (3, 3);
INSERT INTO ITEM_ALLEYA (ID, ID_ALLEYA) VALUES (4, 4);

-- Inserting into CUT
INSERT INTO CUT (ID, CUT) VALUES (1, '2023-12-10');
INSERT INTO CUT (ID, CUT) VALUES (2, '2023-12-23');

