--пополнение

CREATE OR REPLACE PROCEDURE ins_tree(ins_kind VARCHAR(128), ins_plant DATE)
LANGUAGE plpgsql 
AS $$
DECLARE 
    id_all_new INT;
    id_park_new INT;
    id_kind_new INT;
    id_t_a INT;
    id_tree_new INT;
BEGIN
  

    -- Блок с видами деревьев
  
        IF EXISTS (SELECT 1 FROM kind WHERE kind.name = ins_kind) THEN
            SELECT kind.id_kind INTO id_kind_new FROM kind WHERE kind.name = ins_kind;
        ELSE
            id_kind_new := (NULLIF((SELECT MAX(id_kind) FROM kind), 0) + 1);
            INSERT INTO kind(id_kind, name) VALUES (id_kind_new, ins_kind);
        END IF;
  

    -- Блок с деревьями и аллеями
    
    id_tree_new := (SELECT COALESCE(MAX(id_tree), 0) + 1 FROM tree);

    INSERT INTO tree(id_tree, id_kind, plant) VALUES (id_tree_new, id_kind_new, ins_plant);
   
END;
$$;

CALL ins_tree('Клен', '2023-12-11');

-- ///////////////////////////////////////////////////////////////////////////////////

--удаление с очисткой справочника
CREATE OR REPLACE PROCEDURE del_tree(id_t_a INT)
LANGUAGE plpgsql
AS $$
DECLARE 
    id_all_new INT;
BEGIN
    id_all_new := (SELECT id_alleya FROM tree_alleya WHERE id_tree_alleya = id_t_a);

    BEGIN
        DELETE FROM tree_alleya WHERE  id_tree_alleya = id_t_a;
    END;

    BEGIN
        IF NOT EXISTS (SELECT * FROM tree_alleya WHERE id_alleya = id_all_new)
        THEN 
            DELETE FROM alleya WHERE id_alleya = id_all_new;
        END IF;
    END;

   
END;
$$;
call del_tree(16);

-- call del_tree(25);

--Каскадное удаление
CREATE OR REPLACE PROCEDURE del_kind_cascade(id_to_del INT)
LANGUAGE plpgsql 
AS $$
BEGIN
    DELETE FROM tree_alleya WHERE tree_alleya.id_tree IN
        (SELECT tree.id_tree FROM tree WHERE id_kind = id_to_del);
    
    DELETE FROM cut WHERE cut.id_tree IN 
        (SELECT tree.id_tree FROM tree WHERE tree.id_kind = id_to_del);
    
    DELETE FROM tree WHERE tree.id_kind = id_to_del;
    DELETE FROM kind WHERE kind.id_kind = id_to_del;
END;
$$;


--Процедура вычисления и возврат значения агрегатной функции
CREATE OR REPLACE FUNCTION count_trees() RETURNS INTEGER
LANGUAGE plpgsql
AS $$
BEGIN
    RETURN NULLIF(COUNT(id_tree), 0) FROM tree;
END;
$$;

SELECT count_trees();


--Формирование статистики во временной таблице

CREATE OR REPLACE FUNCTION stats() 
RETURNS TABLE (
    id_park INTEGER, 
    name_park VARCHAR(128), 
    alleya_cnt INTEGER, 
    tree_cnt INTEGER,
    kind_cnt INTEGER
) 
LANGUAGE plpgsql
AS $$
BEGIN
    CREATE TEMPORARY TABLE stat (
        id_park INTEGER, 
        name_park VARCHAR(128), 
        alleya_cnt INTEGER, 
        tree_cnt INTEGER,
        kind_cnt INTEGER
    );

    INSERT INTO stat (id_park, name_park, alleya_cnt, tree_cnt, kind_cnt)
    SELECT 
        park.id_park,
        park.name, 
        COUNT(DISTINCT alleya.name), 
        COUNT(tree_alleya.id_tree), 
        COUNT(DISTINCT kind.name) 
    FROM 
        park 
    JOIN alleya ON alleya.id_park = park.id_park 
    JOIN tree_alleya ON tree_alleya.id_alleya = alleya.id_alleya 
    JOIN tree ON tree.id_tree = tree_alleya.id_tree
    JOIN kind ON kind.id_kind = tree.id_kind
    GROUP BY 
        park.id_park;

    RETURN QUERY SELECT 
        stat.id_park, 
        stat.name_park, 
        stat.alleya_cnt, 
        stat.tree_cnt, 
        stat.kind_cnt 
    FROM stat;

    DROP TABLE stat;
END
$$;

SELECT * FROM stats();



--------------------------------------

CREATE OR REPLACE FUNCTION stats() 
RETURNS TABLE (
    id_dep INTEGER, 
    name_dep VARCHAR(128), 
    emp_cnt INTEGER, 
    xray_cnt INTEGER,
    vac_cnt INTEGER
) 
LANGUAGE plpgsql
AS $$
BEGIN
    CREATE TEMPORARY TABLE stat (
        id_dep INTEGER, 
        name_dep VARCHAR(128), 
        emp_cnt INTEGER, 
        xray_cnt INTEGER,
        vac_cnt INTEGER
    );

    INSERT INTO stat (id_dep, name_dep, emp_cnt, xray_cnt, vac_cnt)
    SELECT 
        department.id_dep,
        department.dep_name, 
        COUNT(DISTINCT employee.name), 
        COUNT(xray.id_xray), 
        COUNT(DISTINCT vac_data.id_vac) 
    FROM 
        department 
    JOIN department_employee ON department_employee.id_dep = department.id_dep
    JOIN employee ON employee.id_em = department_employee.id_em 
    JOIN xray ON xray.id_em = employee.id_em
    JOIN vac_data ON vac_data.id_em = employee.id_em
    GROUP BY 
        park.id_park;

    RETURN QUERY SELECT 
        stat.id_park, 
        stat.name_park, 
        stat.alleya_cnt, 
        stat.tree_cnt, 
        stat.kind_cnt 
    FROM stat;

    DROP TABLE stat;
END
$$;

SELECT * FROM stats();